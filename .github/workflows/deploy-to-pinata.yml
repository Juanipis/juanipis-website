name: Deploy to Pinata

on:
  push:
    branches: [master]
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Verify build output
        run: |
          ls -la out/
          echo "Build completed successfully"
          echo "Files to upload:"
          find out -type f | head -10

      - name: Upload directory to Pinata (V3 Multiple Files)
        id: upload
        run: |
          # Install Node.js dependencies for multipart upload
          npm init -y
          npm install form-data node-fetch

          # Create upload script
          cat > upload-v3.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          const FormData = require('form-data');
          const fetch = require('node-fetch');

          async function uploadDirectory() {
            try {
              const form = new FormData();
              const outDir = './out';
              
              // Function to recursively add files to form
              function addFilesToForm(dir, basePath = '') {
                const files = fs.readdirSync(dir);
                
                files.forEach(file => {
                  const filePath = path.join(dir, file);
                  const relativePath = basePath ? `${basePath}/${file}` : file;
                  
                  if (fs.statSync(filePath).isDirectory()) {
                    addFilesToForm(filePath, relativePath);
                  } else {
                    const fileStream = fs.createReadStream(filePath);
                    form.append('file', fileStream, {
                      filename: relativePath,
                      contentType: getMimeType(filePath)
                    });
                  }
                });
              }
              
              function getMimeType(filePath) {
                const ext = path.extname(filePath).toLowerCase();
                const mimeTypes = {
                  '.html': 'text/html',
                  '.css': 'text/css',
                  '.js': 'application/javascript',
                  '.json': 'application/json',
                  '.png': 'image/png',
                  '.jpg': 'image/jpeg',
                  '.jpeg': 'image/jpeg',
                  '.gif': 'image/gif',
                  '.svg': 'image/svg+xml',
                  '.ico': 'image/x-icon',
                  '.webp': 'image/webp',
                  '.mp3': 'audio/mpeg',
                  '.txt': 'text/plain'
                };
                return mimeTypes[ext] || 'application/octet-stream';
              }
              
              // Add all files from out directory
              addFilesToForm(outDir);
              
              // Add metadata
              form.append('name', `juanipis-website-${new Date().toISOString().slice(0,19).replace(/[:-]/g, '')}`);
              form.append('network', 'public');
              
              // Upload to Pinata V3
              const response = await fetch('https://uploads.pinata.cloud/v3/files', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.PINATA_JWT}`,
                  ...form.getHeaders()
                },
                body: form
              });
              
              const result = await response.json();
              
              if (result.error) {
                console.error('Upload failed:', JSON.stringify(result, null, 2));
                process.exit(1);
              }
              
              console.log('Upload successful!');
              console.log('IPFS CID:', result.cid);
              console.log('Gateway URL:', `https://gateway.pinata.cloud/ipfs/${result.cid}`);
              
              // Write outputs for GitHub Actions
              fs.writeFileSync('upload_outputs.txt', 
                `ipfs_hash=${result.cid}\ngateway_url=https://gateway.pinata.cloud/ipfs/${result.cid}`
              );
              
            } catch (error) {
              console.error('Error:', error);
              process.exit(1);
            }
          }

          uploadDirectory();
          EOF

          # Run the upload script
          PINATA_JWT="${{ secrets.PINATA_JWT }}" node upload-v3.js

          # Read outputs
          if [ -f upload_outputs.txt ]; then
            while IFS= read -r line; do
              echo "$line" >> $GITHUB_OUTPUT
            done < upload_outputs.txt
            
            # Extract values for display
            ipfs_hash=$(grep "ipfs_hash=" upload_outputs.txt | cut -d'=' -f2)
            gateway_url=$(grep "gateway_url=" upload_outputs.txt | cut -d'=' -f2)
            
            echo "✅ Successfully uploaded to IPFS: $ipfs_hash"
            echo "🌍 Gateway URL: $gateway_url"
          else
            echo "❌ Upload failed - no output file generated"
            exit 1
          fi

      - name: Create deployment summary
        run: |
          echo "## 🎉 Website deployed to IPFS!" >> $GITHUB_STEP_SUMMARY
          echo "**IPFS Hash:** ${{ steps.upload.outputs.ipfs_hash }}" >> $GITHUB_STEP_SUMMARY
          echo "**Gateway URL:** ${{ steps.upload.outputs.gateway_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Time:** $(date)" >> $GITHUB_STEP_SUMMARY
